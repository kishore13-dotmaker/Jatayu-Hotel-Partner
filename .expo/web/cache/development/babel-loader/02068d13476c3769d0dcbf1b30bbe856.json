{"ast":null,"code":"'use strict';\n\nimport * as TurboModuleRegistry from \"../TurboModule/TurboModuleRegistry\";\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');\nvar ExceptionsManager = {\n  reportFatalException: function reportFatalException(message, stack, exceptionId) {\n    NativeModule.reportFatalException(message, stack, exceptionId);\n  },\n  reportSoftException: function reportSoftException(message, stack, exceptionId) {\n    NativeModule.reportSoftException(message, stack, exceptionId);\n  },\n  updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {\n    NativeModule.updateExceptionMessage(message, stack, exceptionId);\n  },\n  dismissRedbox: function dismissRedbox() {\n    if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {\n      NativeModule.dismissRedbox();\n    }\n  },\n  reportException: function reportException(data) {\n    if (NativeModule.reportException) {\n      NativeModule.reportException(data);\n      return;\n    }\n\n    if (data.isFatal) {\n      ExceptionsManager.reportFatalException(data.message, data.stack, data.id);\n    } else {\n      ExceptionsManager.reportSoftException(data.message, data.stack, data.id);\n    }\n  }\n};\nexport default ExceptionsManager;","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/node_modules/react-native/Libraries/Core/NativeExceptionsManager.js"],"names":["TurboModuleRegistry","Platform","require","NativeModule","getEnforcing","ExceptionsManager","reportFatalException","message","stack","exceptionId","reportSoftException","updateExceptionMessage","dismissRedbox","OS","reportException","data","isFatal","id"],"mappings":"AAUA;;AAGA,OAAO,KAAKA,mBAAZ;;AA8CA,IAAMC,QAAQ,GAAGC,OAAO,yBAAxB;;AAEA,IAAMC,YAAY,GAAGH,mBAAmB,CAACI,YAApB,CACnB,mBADmB,CAArB;AAIA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,oBADwB,gCAEtBC,OAFsB,EAGtBC,KAHsB,EAItBC,WAJsB,EAKtB;AACAN,IAAAA,YAAY,CAACG,oBAAb,CAAkCC,OAAlC,EAA2CC,KAA3C,EAAkDC,WAAlD;AACD,GAPuB;AAQxBC,EAAAA,mBARwB,+BAStBH,OATsB,EAUtBC,KAVsB,EAWtBC,WAXsB,EAYtB;AACAN,IAAAA,YAAY,CAACO,mBAAb,CAAiCH,OAAjC,EAA0CC,KAA1C,EAAiDC,WAAjD;AACD,GAduB;AAexBE,EAAAA,sBAfwB,kCAgBtBJ,OAhBsB,EAiBtBC,KAjBsB,EAkBtBC,WAlBsB,EAmBtB;AACAN,IAAAA,YAAY,CAACQ,sBAAb,CAAoCJ,OAApC,EAA6CC,KAA7C,EAAoDC,WAApD;AACD,GArBuB;AAsBxBG,EAAAA,aAtBwB,2BAsBF;AACpB,QAAIX,QAAQ,CAACY,EAAT,KAAgB,KAAhB,IAAyBV,YAAY,CAACS,aAA1C,EAAyD;AAEvDT,MAAAA,YAAY,CAACS,aAAb;AACD;AACF,GA3BuB;AA4BxBE,EAAAA,eA5BwB,2BA4BRC,IA5BQ,EA4BmB;AACzC,QAAIZ,YAAY,CAACW,eAAjB,EAAkC;AAChCX,MAAAA,YAAY,CAACW,eAAb,CAA6BC,IAA7B;AACA;AACD;;AACD,QAAIA,IAAI,CAACC,OAAT,EAAkB;AAChBX,MAAAA,iBAAiB,CAACC,oBAAlB,CAAuCS,IAAI,CAACR,OAA5C,EAAqDQ,IAAI,CAACP,KAA1D,EAAiEO,IAAI,CAACE,EAAtE;AACD,KAFD,MAEO;AACLZ,MAAAA,iBAAiB,CAACK,mBAAlB,CAAsCK,IAAI,CAACR,OAA3C,EAAoDQ,IAAI,CAACP,KAAzD,EAAgEO,IAAI,CAACE,EAArE;AACD;AACF;AAtCuB,CAA1B;AAyCA,eAAeZ,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport type StackFrame = {|\n  column: ?number,\n  file: ?string,\n  lineNumber: ?number,\n  methodName: string,\n  collapse?: boolean,\n|};\n\nexport type ExceptionData = {\n  message: string,\n  originalMessage: ?string,\n  name: ?string,\n  componentStack: ?string,\n  stack: Array<StackFrame>,\n  id: number,\n  isFatal: boolean,\n  // flowlint-next-line unclear-type:off\n  extraData?: Object,\n  ...\n};\n\nexport interface Spec extends TurboModule {\n  // Deprecated: Use `reportException`\n  +reportFatalException: (\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) => void;\n  // Deprecated: Use `reportException`\n  +reportSoftException: (\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) => void;\n  +reportException?: (data: ExceptionData) => void;\n  +updateExceptionMessage: (\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) => void;\n  // TODO(T53311281): This is a noop on iOS now. Implement it.\n  +dismissRedbox?: () => void;\n}\n\nconst Platform = require('../Utilities/Platform');\n\nconst NativeModule = TurboModuleRegistry.getEnforcing<Spec>(\n  'ExceptionsManager',\n);\n\nconst ExceptionsManager = {\n  reportFatalException(\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) {\n    NativeModule.reportFatalException(message, stack, exceptionId);\n  },\n  reportSoftException(\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) {\n    NativeModule.reportSoftException(message, stack, exceptionId);\n  },\n  updateExceptionMessage(\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) {\n    NativeModule.updateExceptionMessage(message, stack, exceptionId);\n  },\n  dismissRedbox(): void {\n    if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {\n      // TODO(T53311281): This is a noop on iOS now. Implement it.\n      NativeModule.dismissRedbox();\n    }\n  },\n  reportException(data: ExceptionData): void {\n    if (NativeModule.reportException) {\n      NativeModule.reportException(data);\n      return;\n    }\n    if (data.isFatal) {\n      ExceptionsManager.reportFatalException(data.message, data.stack, data.id);\n    } else {\n      ExceptionsManager.reportSoftException(data.message, data.stack, data.id);\n    }\n  },\n};\n\nexport default ExceptionsManager;\n"]},"metadata":{},"sourceType":"module"}