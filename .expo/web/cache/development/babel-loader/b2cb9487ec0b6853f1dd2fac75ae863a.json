{"ast":null,"code":"'use strict';\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport symbolicateStackTrace from \"../../Core/Devtools/symbolicateStackTrace\";\nvar cache = new Map();\n\nvar sanitize = function sanitize(_ref) {\n  var maybeStack = _ref.stack,\n      codeFrame = _ref.codeFrame;\n\n  if (!Array.isArray(maybeStack)) {\n    throw new Error('Expected stack to be an array.');\n  }\n\n  var stack = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(maybeStack), _step; !(_step = _iterator()).done;) {\n    var maybeFrame = _step.value;\n    var collapse = false;\n\n    if ('collapse' in maybeFrame) {\n      if (typeof maybeFrame.collapse !== 'boolean') {\n        throw new Error('Expected stack frame `collapse` to be a boolean.');\n      }\n\n      collapse = maybeFrame.collapse;\n    }\n\n    stack.push({\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n      collapse: collapse\n    });\n  }\n\n  return {\n    stack: stack,\n    codeFrame: codeFrame\n  };\n};\n\nexport function deleteStack(stack) {\n  cache.delete(stack);\n}\nexport function symbolicate(stack) {\n  var promise = cache.get(stack);\n\n  if (promise == null) {\n    promise = symbolicateStackTrace(stack).then(sanitize);\n    cache.set(stack, promise);\n  }\n\n  return promise;\n}","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/node_modules/react-native/Libraries/LogBox/Data/LogBoxSymbolication.js"],"names":["symbolicateStackTrace","cache","Map","sanitize","maybeStack","stack","codeFrame","Array","isArray","Error","maybeFrame","collapse","push","column","file","lineNumber","methodName","deleteStack","delete","symbolicate","promise","get","then","set"],"mappings":"AAUA;;;;;;;;AAEA,OAAOA,qBAAP;AAOA,IAAMC,KAAkD,GAAG,IAAIC,GAAJ,EAA3D;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAGqC;AAAA,MAF7CC,UAE6C,QAFpDC,KAEoD;AAAA,MADpDC,SACoD,QADpDA,SACoD;;AACpD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAIK,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,MAAMJ,KAAK,GAAG,EAAd;;AACA,uDAAyBD,UAAzB,wCAAqC;AAAA,QAA1BM,UAA0B;AACnC,QAAIC,QAAQ,GAAG,KAAf;;AACA,QAAI,cAAcD,UAAlB,EAA8B;AAC5B,UAAI,OAAOA,UAAU,CAACC,QAAlB,KAA+B,SAAnC,EAA8C;AAC5C,cAAM,IAAIF,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACDE,MAAAA,QAAQ,GAAGD,UAAU,CAACC,QAAtB;AACD;;AACDN,IAAAA,KAAK,CAACO,IAAN,CAAW;AACTC,MAAAA,MAAM,EAAEH,UAAU,CAACG,MADV;AAETC,MAAAA,IAAI,EAAEJ,UAAU,CAACI,IAFR;AAGTC,MAAAA,UAAU,EAAEL,UAAU,CAACK,UAHd;AAITC,MAAAA,UAAU,EAAEN,UAAU,CAACM,UAJd;AAKTL,MAAAA,QAAQ,EAARA;AALS,KAAX;AAOD;;AACD,SAAO;AAACN,IAAAA,KAAK,EAALA,KAAD;AAAQC,IAAAA,SAAS,EAATA;AAAR,GAAP;AACD,CAzBD;;AA2BA,OAAO,SAASW,WAAT,CAAqBZ,KAArB,EAAyC;AAC9CJ,EAAAA,KAAK,CAACiB,MAAN,CAAab,KAAb;AACD;AAED,OAAO,SAASc,WAAT,CAAqBd,KAArB,EAAoE;AACzE,MAAIe,OAAO,GAAGnB,KAAK,CAACoB,GAAN,CAAUhB,KAAV,CAAd;;AACA,MAAIe,OAAO,IAAI,IAAf,EAAqB;AACnBA,IAAAA,OAAO,GAAGpB,qBAAqB,CAACK,KAAD,CAArB,CAA6BiB,IAA7B,CAAkCnB,QAAlC,CAAV;AACAF,IAAAA,KAAK,CAACsB,GAAN,CAAUlB,KAAV,EAAiBe,OAAjB;AACD;;AAED,SAAOA,OAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport symbolicateStackTrace from '../../Core/Devtools/symbolicateStackTrace';\n\nimport type {StackFrame} from '../../Core/NativeExceptionsManager';\nimport type {SymbolicatedStackTrace} from '../../Core/Devtools/symbolicateStackTrace';\n\nexport type Stack = Array<StackFrame>;\n\nconst cache: Map<Stack, Promise<SymbolicatedStackTrace>> = new Map();\n\n/**\n * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n */\nconst sanitize = ({\n  stack: maybeStack,\n  codeFrame,\n}: SymbolicatedStackTrace): SymbolicatedStackTrace => {\n  if (!Array.isArray(maybeStack)) {\n    throw new Error('Expected stack to be an array.');\n  }\n  const stack = [];\n  for (const maybeFrame of maybeStack) {\n    let collapse = false;\n    if ('collapse' in maybeFrame) {\n      if (typeof maybeFrame.collapse !== 'boolean') {\n        throw new Error('Expected stack frame `collapse` to be a boolean.');\n      }\n      collapse = maybeFrame.collapse;\n    }\n    stack.push({\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n      collapse,\n    });\n  }\n  return {stack, codeFrame};\n};\n\nexport function deleteStack(stack: Stack): void {\n  cache.delete(stack);\n}\n\nexport function symbolicate(stack: Stack): Promise<SymbolicatedStackTrace> {\n  let promise = cache.get(stack);\n  if (promise == null) {\n    promise = symbolicateStackTrace(stack).then(sanitize);\n    cache.set(stack, promise);\n  }\n\n  return promise;\n}\n"]},"metadata":{},"sourceType":"module"}