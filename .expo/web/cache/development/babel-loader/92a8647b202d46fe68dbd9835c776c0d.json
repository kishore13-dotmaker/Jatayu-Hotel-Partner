{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport EventSubscription from \"./_EventSubscription\";\n\nvar EmitterSubscription = function (_EventSubscription) {\n  _inherits(EmitterSubscription, _EventSubscription);\n\n  var _super = _createSuper(EmitterSubscription);\n\n  function EmitterSubscription(emitter, subscriber, listener, context) {\n    var _this;\n\n    _classCallCheck(this, EmitterSubscription);\n\n    _this = _super.call(this, subscriber);\n    _this.emitter = emitter;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n\n  _createClass(EmitterSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.emitter.removeSubscription(this);\n    }\n  }]);\n\n  return EmitterSubscription;\n}(EventSubscription);\n\nmodule.exports = EmitterSubscription;","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/node_modules/react-native/Libraries/vendor/emitter/_EmitterSubscription.js"],"names":["EventSubscription","EmitterSubscription","emitter","subscriber","listener","context","removeSubscription","module","exports"],"mappings":"AAUA;;;;;;;;;;;;AAGA,OAAOA,iBAAP;;IAMMC,mB;;;;;AAgBJ,+BAEEC,OAFF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,OALF,EAME;AAAA;;AAAA;;AACA,8BAAMF,UAAN;AACA,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKE,QAAL,GAAgBA,QAAhB;AACA,UAAKC,OAAL,GAAeA,OAAf;AAJA;AAKD;;;;WAQD,kBAAS;AACP,WAAKH,OAAL,CAAaI,kBAAb,CAAgC,IAAhC;AACD;;;;EArC+BN,iB;;AAwClCO,MAAM,CAACC,OAAP,GAAiBP,mBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type EventEmitter from './EventEmitter';\nimport EventSubscription from './_EventSubscription';\nimport type EventSubscriptionVendor from './_EventSubscriptionVendor';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription extends EventSubscription {\n  // $FlowFixMe[value-as-type]\n  emitter: EventEmitter;\n  listener: Function;\n  context: ?Object;\n\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(\n    // $FlowFixMe[value-as-type]\n    emitter: EventEmitter,\n    subscriber: EventSubscriptionVendor,\n    listener: Function,\n    context: ?Object,\n  ) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n}\n\nmodule.exports = EmitterSubscription;\n"]},"metadata":{},"sourceType":"module"}