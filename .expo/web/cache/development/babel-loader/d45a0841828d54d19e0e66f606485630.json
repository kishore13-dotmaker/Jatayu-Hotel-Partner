{"ast":null,"code":"'use strict';\n\nvar base64 = require('base64-js');\n\nfunction binaryToBase64(data) {\n  if (data instanceof ArrayBuffer) {\n    data = new Uint8Array(data);\n  }\n\n  if (data instanceof Uint8Array) {\n    return base64.fromByteArray(data);\n  }\n\n  if (!ArrayBuffer.isView(data)) {\n    throw new Error('data must be ArrayBuffer or typed array');\n  }\n\n  var _ref = data,\n      buffer = _ref.buffer,\n      byteOffset = _ref.byteOffset,\n      byteLength = _ref.byteLength;\n  return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));\n}\n\nmodule.exports = binaryToBase64;","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/node_modules/react-native/Libraries/Utilities/binaryToBase64.js"],"names":["base64","require","binaryToBase64","data","ArrayBuffer","Uint8Array","fromByteArray","isView","Error","buffer","byteOffset","byteLength","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAAsE;AACpE,MAAIA,IAAI,YAAYC,WAApB,EAAiC;AAE/BD,IAAAA,IAAI,GAAG,IAAIE,UAAJ,CAAeF,IAAf,CAAP;AACD;;AACD,MAAIA,IAAI,YAAYE,UAApB,EAAgC;AAC9B,WAAOL,MAAM,CAACM,aAAP,CAAqBH,IAArB,CAAP;AACD;;AACD,MAAI,CAACC,WAAW,CAACG,MAAZ,CAAmBJ,IAAnB,CAAL,EAA+B;AAC7B,UAAM,IAAIK,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,aAA2CL,IAA3C;AAAA,MAAOM,MAAP,QAAOA,MAAP;AAAA,MAAeC,UAAf,QAAeA,UAAf;AAAA,MAA2BC,UAA3B,QAA2BA,UAA3B;AACA,SAAOX,MAAM,CAACM,aAAP,CAAqB,IAAID,UAAJ,CAAeI,MAAf,EAAuBC,UAAvB,EAAmCC,UAAnC,CAArB,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBX,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst base64 = require('base64-js');\n\nfunction binaryToBase64(data: ArrayBuffer | $ArrayBufferView): string {\n  if (data instanceof ArrayBuffer) {\n    // $FlowFixMe[reassign-const]\n    data = new Uint8Array(data);\n  }\n  if (data instanceof Uint8Array) {\n    return base64.fromByteArray(data);\n  }\n  if (!ArrayBuffer.isView(data)) {\n    throw new Error('data must be ArrayBuffer or typed array');\n  }\n  // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`\n  const {buffer, byteOffset, byteLength} = ((data: $FlowFixMe): DataView);\n  return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));\n}\n\nmodule.exports = binaryToBase64;\n"]},"metadata":{},"sourceType":"script"}