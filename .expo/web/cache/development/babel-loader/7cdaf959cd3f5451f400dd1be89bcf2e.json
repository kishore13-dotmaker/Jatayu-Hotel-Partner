{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"../Utilities/Platform\";\nimport NativeDialogManagerAndroid from \"../NativeModules/specs/NativeDialogManagerAndroid\";\nimport RCTAlertManager from \"./RCTAlertManager\";\n\nvar Alert = function () {\n  function Alert() {\n    _classCallCheck(this, Alert);\n  }\n\n  _createClass(Alert, null, [{\n    key: \"alert\",\n    value: function alert(title, message, buttons, options) {\n      if (Platform.OS === 'ios') {\n        Alert.prompt(title, message, buttons, 'default');\n      } else if (Platform.OS === 'android') {\n        if (!NativeDialogManagerAndroid) {\n          return;\n        }\n\n        var constants = NativeDialogManagerAndroid.getConstants();\n        var config = {\n          title: title || '',\n          message: message || '',\n          cancelable: false\n        };\n\n        if (options && options.cancelable) {\n          config.cancelable = options.cancelable;\n        }\n\n        var defaultPositiveText = 'OK';\n        var validButtons = buttons ? buttons.slice(0, 3) : [{\n          text: defaultPositiveText\n        }];\n        var buttonPositive = validButtons.pop();\n        var buttonNegative = validButtons.pop();\n        var buttonNeutral = validButtons.pop();\n\n        if (buttonNeutral) {\n          config.buttonNeutral = buttonNeutral.text || '';\n        }\n\n        if (buttonNegative) {\n          config.buttonNegative = buttonNegative.text || '';\n        }\n\n        if (buttonPositive) {\n          config.buttonPositive = buttonPositive.text || defaultPositiveText;\n        }\n\n        var onAction = function onAction(action, buttonKey) {\n          if (action === constants.buttonClicked) {\n            if (buttonKey === constants.buttonNeutral) {\n              buttonNeutral.onPress && buttonNeutral.onPress();\n            } else if (buttonKey === constants.buttonNegative) {\n              buttonNegative.onPress && buttonNegative.onPress();\n            } else if (buttonKey === constants.buttonPositive) {\n              buttonPositive.onPress && buttonPositive.onPress();\n            }\n          } else if (action === constants.dismissed) {\n            options && options.onDismiss && options.onDismiss();\n          }\n        };\n\n        var onError = function onError(errorMessage) {\n          return console.warn(errorMessage);\n        };\n\n        NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n      }\n    }\n  }, {\n    key: \"prompt\",\n    value: function prompt(title, message, callbackOrButtons) {\n      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';\n      var defaultValue = arguments.length > 4 ? arguments[4] : undefined;\n      var keyboardType = arguments.length > 5 ? arguments[5] : undefined;\n\n      if (Platform.OS === 'ios') {\n        var callbacks = [];\n        var buttons = [];\n        var cancelButtonKey;\n        var destructiveButtonKey;\n\n        if (typeof callbackOrButtons === 'function') {\n          callbacks = [callbackOrButtons];\n        } else if (Array.isArray(callbackOrButtons)) {\n          callbackOrButtons.forEach(function (btn, index) {\n            callbacks[index] = btn.onPress;\n\n            if (btn.style === 'cancel') {\n              cancelButtonKey = String(index);\n            } else if (btn.style === 'destructive') {\n              destructiveButtonKey = String(index);\n            }\n\n            if (btn.text || index < (callbackOrButtons || []).length - 1) {\n              var btnDef = {};\n              btnDef[index] = btn.text || '';\n              buttons.push(btnDef);\n            }\n          });\n        }\n\n        RCTAlertManager.alertWithArgs({\n          title: title || '',\n          message: message || undefined,\n          buttons: buttons,\n          type: type || undefined,\n          defaultValue: defaultValue,\n          cancelButtonKey: cancelButtonKey,\n          destructiveButtonKey: destructiveButtonKey,\n          keyboardType: keyboardType\n        }, function (id, value) {\n          var cb = callbacks[id];\n          cb && cb(value);\n        });\n      }\n    }\n  }]);\n\n  return Alert;\n}();\n\nmodule.exports = Alert;","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/node_modules/react-native/Libraries/Alert/Alert.js"],"names":["Platform","NativeDialogManagerAndroid","RCTAlertManager","Alert","title","message","buttons","options","OS","prompt","constants","getConstants","config","cancelable","defaultPositiveText","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","onAction","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","onError","errorMessage","console","warn","showAlert","callbackOrButtons","type","defaultValue","keyboardType","callbacks","cancelButtonKey","destructiveButtonKey","Array","isArray","forEach","btn","index","style","String","length","btnDef","push","alertWithArgs","undefined","id","value","cb","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport Platform from '../Utilities/Platform';\nimport NativeDialogManagerAndroid, {\n  type DialogOptions,\n} from '../NativeModules/specs/NativeDialogManagerAndroid';\nimport RCTAlertManager from './RCTAlertManager';\n\nexport type AlertType =\n  | 'default'\n  | 'plain-text'\n  | 'secure-text'\n  | 'login-password';\nexport type AlertButtonStyle = 'default' | 'cancel' | 'destructive';\nexport type Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  style?: AlertButtonStyle,\n  ...\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  onDismiss?: ?() => void,\n  ...\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * See https://reactnative.dev/docs/alert.html\n */\nclass Alert {\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      Alert.prompt(title, message, buttons, 'default');\n    } else if (Platform.OS === 'android') {\n      if (!NativeDialogManagerAndroid) {\n        return;\n      }\n      const constants = NativeDialogManagerAndroid.getConstants();\n\n      const config: DialogOptions = {\n        title: title || '',\n        message: message || '',\n        cancelable: false,\n      };\n\n      if (options && options.cancelable) {\n        config.cancelable = options.cancelable;\n      }\n      // At most three buttons (neutral, negative, positive). Ignore rest.\n      // The text 'OK' should be probably localized. iOS Alert does that in native.\n      const defaultPositiveText = 'OK';\n      const validButtons: Buttons = buttons\n        ? buttons.slice(0, 3)\n        : [{text: defaultPositiveText}];\n      const buttonPositive = validButtons.pop();\n      const buttonNegative = validButtons.pop();\n      const buttonNeutral = validButtons.pop();\n\n      if (buttonNeutral) {\n        config.buttonNeutral = buttonNeutral.text || '';\n      }\n      if (buttonNegative) {\n        config.buttonNegative = buttonNegative.text || '';\n      }\n      if (buttonPositive) {\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\n      }\n\n      const onAction = (action, buttonKey) => {\n        if (action === constants.buttonClicked) {\n          if (buttonKey === constants.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === constants.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === constants.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === constants.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      };\n      const onError = errorMessage => console.warn(errorMessage);\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n    }\n  }\n\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | Buttons),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n  ): void {\n    if (Platform.OS === 'ios') {\n      let callbacks = [];\n      const buttons = [];\n      let cancelButtonKey;\n      let destructiveButtonKey;\n      if (typeof callbackOrButtons === 'function') {\n        callbacks = [callbackOrButtons];\n      } else if (Array.isArray(callbackOrButtons)) {\n        callbackOrButtons.forEach((btn, index) => {\n          callbacks[index] = btn.onPress;\n          if (btn.style === 'cancel') {\n            cancelButtonKey = String(index);\n          } else if (btn.style === 'destructive') {\n            destructiveButtonKey = String(index);\n          }\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\n            const btnDef = {};\n            btnDef[index] = btn.text || '';\n            buttons.push(btnDef);\n          }\n        });\n      }\n\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          message: message || undefined,\n          buttons,\n          type: type || undefined,\n          defaultValue,\n          cancelButtonKey,\n          destructiveButtonKey,\n          keyboardType,\n        },\n        (id, value) => {\n          const cb = callbacks[id];\n          cb && cb(value);\n        },\n      );\n    }\n  }\n}\n\nmodule.exports = Alert;\n"]},"metadata":{},"sourceType":"module"}