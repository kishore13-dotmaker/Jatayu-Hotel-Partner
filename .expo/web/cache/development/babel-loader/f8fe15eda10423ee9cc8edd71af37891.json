{"ast":null,"code":"'use strict';\n\nvar rejectionTrackingOptions = {\n  allRejections: true,\n  onUnhandled: function onUnhandled(id) {\n    var _message;\n\n    var rejection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var message;\n    var stack;\n    var stringValue = Object.prototype.toString.call(rejection);\n\n    if (stringValue === '[object Error]') {\n      message = Error.prototype.toString.call(rejection);\n      var error = rejection;\n      stack = error.stack;\n    } else {\n      try {\n        message = require('pretty-format')(rejection);\n      } catch (_unused) {\n        message = typeof rejection === 'string' ? rejection : JSON.stringify(rejection);\n      }\n    }\n\n    var warning = \"Possible Unhandled Promise Rejection (id: \" + id + \"):\\n\" + (((_message = message) != null ? _message : '') + \"\\n\") + (stack == null ? '' : stack);\n    console.warn(warning);\n  },\n  onHandled: function onHandled(id) {\n    var warning = \"Promise Rejection Handled (id: \" + id + \")\\n\" + 'This means you can ignore any previous messages of the form ' + (\"\\\"Possible Unhandled Promise Rejection (id: \" + id + \"):\\\"\");\n    console.warn(warning);\n  }\n};\nexport default rejectionTrackingOptions;","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/node_modules/react-native/Libraries/promiseRejectionTrackingOptions.js"],"names":["rejectionTrackingOptions","allRejections","onUnhandled","id","rejection","message","stack","stringValue","Object","prototype","toString","call","Error","error","require","JSON","stringify","warning","console","warn","onHandled"],"mappings":"AAUA;;AAMA,IAAIA,wBAA2D,GAAG;AAChEC,EAAAA,aAAa,EAAE,IADiD;AAEhEC,EAAAA,WAAW,EAAE,qBAACC,EAAD,EAAwB;AAAA;;AAAA,QAAnBC,SAAmB,uEAAP,EAAO;AACnC,QAAIC,OAAJ;AACA,QAAIC,KAAJ;AAEA,QAAMC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,SAA/B,CAApB;;AACA,QAAIG,WAAW,KAAK,gBAApB,EAAsC;AACpCF,MAAAA,OAAO,GAAGO,KAAK,CAACH,SAAN,CAAgBC,QAAhB,CAAyBC,IAAzB,CAA8BP,SAA9B,CAAV;AACA,UAAMS,KAAY,GAAIT,SAAtB;AACAE,MAAAA,KAAK,GAAGO,KAAK,CAACP,KAAd;AACD,KAJD,MAIO;AACL,UAAI;AACFD,QAAAA,OAAO,GAAGS,OAAO,CAAC,eAAD,CAAP,CAAyBV,SAAzB,CAAV;AACD,OAFD,CAEE,gBAAM;AACNC,QAAAA,OAAO,GACL,OAAOD,SAAP,KAAqB,QAArB,GACIA,SADJ,GAEIW,IAAI,CAACC,SAAL,CAAgBZ,SAAhB,CAHN;AAID;AACF;;AAED,QAAMa,OAAO,GACX,+CAA6Cd,EAA7C,0BACGE,OADH,uBACc,EADd,aAECC,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAFtB,CADF;AAIAY,IAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb;AACD,GA3B+D;AA4BhEG,EAAAA,SAAS,EAAE,mBAAAjB,EAAE,EAAI;AACf,QAAMc,OAAO,GACX,oCAAkCd,EAAlC,WACA,8DADA,qDAE8CA,EAF9C,UADF;AAIAe,IAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb;AACD;AAlC+D,CAAlE;AAqCA,eAAejB,wBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport typeof {enable} from 'promise/setimmediate/rejection-tracking';\n\ntype ExtractOptionsType = <P>((options?: ?P) => void) => P;\n\nlet rejectionTrackingOptions: $Call<ExtractOptionsType, enable> = {\n  allRejections: true,\n  onUnhandled: (id, rejection = {}) => {\n    let message: string;\n    let stack: ?string;\n\n    const stringValue = Object.prototype.toString.call(rejection);\n    if (stringValue === '[object Error]') {\n      message = Error.prototype.toString.call(rejection);\n      const error: Error = (rejection: $FlowFixMe);\n      stack = error.stack;\n    } else {\n      try {\n        message = require('pretty-format')(rejection);\n      } catch {\n        message =\n          typeof rejection === 'string'\n            ? rejection\n            : JSON.stringify((rejection: $FlowFixMe));\n      }\n    }\n\n    const warning =\n      `Possible Unhandled Promise Rejection (id: ${id}):\\n` +\n      `${message ?? ''}\\n` +\n      (stack == null ? '' : stack);\n    console.warn(warning);\n  },\n  onHandled: id => {\n    const warning =\n      `Promise Rejection Handled (id: ${id})\\n` +\n      'This means you can ignore any previous messages of the form ' +\n      `\"Possible Unhandled Promise Rejection (id: ${id}):\"`;\n    console.warn(warning);\n  },\n};\n\nexport default rejectionTrackingOptions;\n"]},"metadata":{},"sourceType":"module"}