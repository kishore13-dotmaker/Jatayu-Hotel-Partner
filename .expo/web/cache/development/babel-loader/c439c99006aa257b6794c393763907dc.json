{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { StripeProvider } from \"@stripe/stripe-react-native\";\nimport { useStripe } from \"@stripe/stripe-react-native\";\nimport PaymentStyles from \"./PaymentStyles\";\n\nvar PaymentScreen = function PaymentScreen(_ref) {\n  var navigation = _ref.navigation,\n      props = _ref.props;\n  var API_URL = \"http://localhost:8080\";\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var stripe = useStripe();\n\n  var fetchPaymentIntentClientSecret = function fetchPaymentIntentClientSecret() {\n    var response, _await$response$json, clientSecret, error;\n\n    return _regeneratorRuntime.async(function fetchPaymentIntentClientSecret$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(API_URL + \"/pay\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                email: email\n              }),\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            _await$response$json = _context.sent;\n            clientSecret = _await$response$json.clientSecret;\n            error = _await$response$json.error;\n            return _context.abrupt(\"return\", {\n              clientSecret: clientSecret,\n              error: error\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePayPress = function handlePayPress() {\n    var billingDetails, _await$fetchPaymentIn, clientSecret, error, initSheet, presentSheet;\n\n    return _regeneratorRuntime.async(function handlePayPress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (email) {\n              _context2.next = 3;\n              break;\n            }\n\n            Alert.alert(\"Please enter valid Email\");\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            billingDetails = {\n              email: email\n            };\n            _context2.prev = 4;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(fetchPaymentIntentClientSecret());\n\n          case 7:\n            _await$fetchPaymentIn = _context2.sent;\n            clientSecret = _await$fetchPaymentIn.clientSecret;\n            error = _await$fetchPaymentIn.error;\n\n            if (!error) {\n              _context2.next = 14;\n              break;\n            }\n\n            console.log(\"Unable to process payment\");\n            _context2.next = 25;\n            break;\n\n          case 14:\n            _context2.next = 16;\n            return _regeneratorRuntime.awrap(stripe.initPaymentSheet({\n              paymentIntentClientSecret: clientSecret\n            }));\n\n          case 16:\n            initSheet = _context2.sent;\n\n            if (!initSheet.error) {\n              _context2.next = 19;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Alert.alert(initSheet.error.message));\n\n          case 19:\n            _context2.next = 21;\n            return _regeneratorRuntime.awrap(stripe.presentPaymentSheet({\n              clientSecret: clientSecret\n            }));\n\n          case 21:\n            presentSheet = _context2.sent;\n\n            if (!presentSheet.error) {\n              _context2.next = 24;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Alert.alert(presentSheet.error.message));\n\n          case 24:\n            Alert.alert(\"Payment complete, thank you!\");\n\n          case 25:\n            ;\n            _context2.next = 31;\n            break;\n\n          case 28:\n            _context2.prev = 28;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.log(_context2.t0);\n\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[4, 28]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: PaymentStyles.container\n  }, React.createElement(StripeProvider, {\n    publishableKey: \"pk_test_51KFMKpSFhRwTxyXZDMXbRgR1LeBYbfdyZzuqldHxyFpZz3WYamRyYZ9428b0P8sXpk7zP3QMWJrwcO07dJ5HStGL00FHZ5gd72\"\n  }, React.createElement(TextInput, {\n    value: email,\n    autoCapitalize: \"none\",\n    placeholder: \"E-mail\",\n    keyboardType: \"email-address\",\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    style: PaymentStyles.input\n  }), React.createElement(Button, {\n    onPress: handlePayPress,\n    title: \"Pay\"\n  })));\n};\n\nexport default PaymentScreen;","map":{"version":3,"sources":["C:/Users/kisho/Downloads/phonestly-app-Google-pay/phonestly-app-Google-pay/src/components/StripePayment/Payment.js"],"names":["React","useState","StripeProvider","useStripe","PaymentStyles","PaymentScreen","navigation","props","API_URL","email","setEmail","stripe","fetchPaymentIntentClientSecret","fetch","method","body","JSON","stringify","headers","Accept","response","json","clientSecret","error","handlePayPress","Alert","alert","billingDetails","console","log","initPaymentSheet","paymentIntentClientSecret","initSheet","message","presentPaymentSheet","presentSheet","container","text","input"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text, StyleSheet, TextInput, Button, Alert } from \"react-native\";\nimport { StripeProvider } from \"@stripe/stripe-react-native\";\nimport { useStripe } from \"@stripe/stripe-react-native\";\n\n\nimport PaymentStyles from './PaymentStyles';\n\n\n\nconst PaymentScreen = ({ navigation, props }) => {\n  //ADD localhost address of your server\n  const API_URL = \"http://localhost:8080\";\n\n  const [email, setEmail] = useState();\n  // const [cardDetails, setCardDetails] = useState();\n  const stripe = useStripe();\n  // const { confirmPayment, loading } = useConfirmPayment();\n\n  const fetchPaymentIntentClientSecret = async () => {\n    const response = await fetch(`${API_URL}/pay`, {\n      method: \"POST\",\n      body: JSON.stringify({ email }),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const { clientSecret, error } = await response.json();\n    return { clientSecret, error };\n  };\n\n  const handlePayPress = async () => {\n    //1.Gather the customer's billing information (e.g., email)\n    if (!email) {\n      Alert.alert(\"Please enter valid Email\");\n      return;\n    }\n    const billingDetails = {\n      email: email,\n    };\n    //2.Fetch the intent client secret from the backend\n    try {\n      const { clientSecret, error } = await fetchPaymentIntentClientSecret();\n      //2. confirm the payment\n      if (error) {\n        console.log(\"Unable to process payment\");\n      } else {\n\n        const initSheet = await stripe.initPaymentSheet({\n          paymentIntentClientSecret: clientSecret,\n        });\n        if (initSheet.error) return Alert.alert(initSheet.error.message);\n        const presentSheet = await stripe.presentPaymentSheet({\n          clientSecret,\n        });\n        if (presentSheet.error) return Alert.alert(presentSheet.error.message);\n        Alert.alert(\"Payment complete, thank you!\");\n      };\n\n    } catch (e) {\n      console.log(e);\n    }\n    //3.Confirm the payment with the card details\n  };\n\n  return (\n    <View style={PaymentStyles.container}>\n      <StripeProvider publishableKey=\"pk_test_51KFMKpSFhRwTxyXZDMXbRgR1LeBYbfdyZzuqldHxyFpZz3WYamRyYZ9428b0P8sXpk7zP3QMWJrwcO07dJ5HStGL00FHZ5gd72\">\n        {/* <StripeProvider\n          publishableKey=\"pk_test_51KFMKpSFhRwTxyXZDMXbRgR1LeBYbfdyZzuqldHxyFpZz3WYamRyYZ9428b0P8sXpk7zP3QMWJrwcO07dJ5HStGL00FHZ5gd72\"\n          urlScheme=\"your-url-scheme\" // required for 3D Secure and bank redirects\n          merchantIdentifier=\"merchant.com.{{YOUR_APP_NAME}}\" // required for Apple Pay\n        > */}\n\n        {/* </StripeProvider> */}\n        <TextInput\n          value={email}\n          autoCapitalize=\"none\"\n          placeholder=\"E-mail\"\n          keyboardType=\"email-address\"\n          onChangeText={(text) => setEmail(text)}\n          style={PaymentStyles.input}\n        />\n        <Button onPress={handlePayPress} title=\"Pay\" />\n      </StripeProvider>\n\n    </View>\n\n  );\n};\n\n\n\n\nexport default PaymentScreen;\n"]},"metadata":{},"sourceType":"module"}